# 是否是 dry-run 的开关
dryRun: true

# 主要组件安装的 Namespace。有些特定组件会安装到 istio-system 等固定位置
namespace: kubeflow

# Kubeflow 使用的域名和根路径。必须配置使用 FQDN 格式的域名。如果要使用 IP
# 可以配置成 *。kubeflowSitePrefix 必须以 / 结尾
kubeflowHost: "*"
kubeflowSitePrefix: "/"

# 配置和认证服务 Dex 的联动
oidcAuthURL: /dex/auth
oidcProvider: http://dex.auth.svc.cluster.local:5556/dex
oidcRedirectURL: /login/oidc
skipAuthURI: "/dex"
useridClaim: email
useridHeader: kubeflow-userid
useridPrefix: "\"\""
oidcScopes: "profile email groups"
tlsCrt: "<你的 HTTPS crt内容(base64 encoded)>"
tlsKey: "<你的 HTTPS key内容(base64 encoded)>"

notebookAccessPipelineDesc: "Allow access pipeline"

minio:
  enabled: true
  kfpMinioImage: gcr.io/ml-pipeline/minio:RELEASE.2019-08-14T20-37-41Z-license-compliance
# NOTE: minioAK and minioSK 是从子 chart 中继承来的。如果不使用子chart中的 minio
# 需要手动配置下面的 AK/SK 值，确保 Kubeflow 可以访问 Minio。
# minioAK: 
# minioSK: 

# 如果使用 dex 子 chart，则会继承 clientID, clientSecret，defaultUserEmail, 否则需要手动配置。
dex:
  enabled: true
# 配置 OIDC 的 client_id/client_secret （base64编码）
# clientID: a3ViZWZsb3ctb2lkYy1hdXRoc2VydmljZQ==
# clientSecret: WlhoaGJYQnNaUzFoY0hBdGMyVmpjbVYw
# defaultUserEmail: user@example.com

# 配置默认账户 defaultUserEmail 关联的 namespace:
defaultUserProfile: kubeflow-user-example-com

# ----------------------------------------------------
# 以下为镜像配置
# 每个镜像包含两行，第一行注释掉的是当前版本官方原始镜像
# 第二行为实际需要使用的镜像
# ----------------------------------------------------
admissionWebhookImage: public.ecr.aws/j1r0q0g6/notebooks/admission-webhook:v1.4
jupyterWebAppImage: public.ecr.aws/j1r0q0g6/notebooks/jupyter-web-app:v1.4
notebookControllerImage: public.ecr.aws/j1r0q0g6/notebooks/notebook-controller:v1.4
notebookImageScipy: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/jupyter-scipy:v1.4
notebookImagePytorch: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/jupyter-pytorch-full:v1.4
notebookImagePytorchCuda: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/jupyter-pytorch-cuda-full:v1.4
notebookImageTensorflow: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/jupyter-tensorflow-full:v1.4
notebookImageTensorflowCuda: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/jupyter-tensorflow-cuda-full:v1.4

oidcAuthServiceImage: gcr.io/arrikto/kubeflow/oidc-authservice:28c59ef
centralDashboardImage: public.ecr.aws/j1r0q0g6/notebooks/central-dashboard:v1.4
kfamAccessManagementImage: public.ecr.aws/j1r0q0g6/notebooks/access-management:v1.4
kfamProfileControllerImage: public.ecr.aws/j1r0q0g6/notebooks/profile-controller:v1.4
volumesWebAppImage: public.ecr.aws/j1r0q0g6/notebooks/volumes-web-app:v1.4
notebookImageCodeserverPython: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/codeserver-python:v1.4
notebookImageRstudioTidyverse: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/rstudio-tidyverse:v1.4

# ----------------------------------------------------
# Kubeflow Pipeline
# ----------------------------------------------------
# kfpVersion 指定 kubeflow pipeline 镜像版本
kfpVersion: "1.7.0"

kfpApiServerImageAndTag: gcr.io/ml-pipeline/api-server:1.7.0

# 以下 kubeflow pipeline 组件的镜像需要和 kfpVersion 一起使用作为tag
kfpVisualizationServerImage: gcr.io/ml-pipeline/visualization-server
kfpFrontendImage: gcr.io/ml-pipeline/frontend
kfpViewerCrdControllerImage: gcr.io/ml-pipeline/viewer-crd-controller
kfpScheduledWorkflowImage: gcr.io/ml-pipeline/scheduledworkflow
kfpPersistenceAgentImage: gcr.io/ml-pipeline/persistenceagent
kfpMetadataWriterImage: gcr.io/ml-pipeline/metadata-writer
kfpMetadataEnvoyImage: gcr.io/ml-pipeline/metadata-envoy
kfpCacheServerImage: gcr.io/ml-pipeline/cache-server
kfpCacheDeployerImage: gcr.io/ml-pipeline/cache-deployer


# 以下 kubeflow pipeline 组件拥有独立的 tag
kfpMlMetadataStoreServerImage: gcr.io/tfx-oss-public/ml_metadata_store_server:1.0.0
kfpCacheImage: gcr.io/google-containers/busybox
kfpArgoExecImage: gcr.io/ml-pipeline/argoexec:v3.1.6-patch-license-compliance
kfpArgoControllerImage: gcr.io/ml-pipeline/workflow-controller:v3.1.6-patch-license-compliance
kfpMetaControllerImage: metacontroller/metacontroller:v0.3.0
kfpMysqlImage: gcr.io/ml-pipeline/mysql:5.7
kfpPythonImage: python:3.7


# ----------------------------------------------------
# KFServing
# ----------------------------------------------------
kfsVersion: "v0.6.1"
kfsAgentImage: kfserving/agent
kfsAlibiExplainerImage: kfserving/alibi-explainer
kfsAixExplainer: kfserving/aix-explainer
kfsArtExplainer: kfserving/art-explainer

kfsTensorflowImage: tensorflow/serving
kfsTensorflowImageVersion: "1.14.0"
kfsTensorflowImageGpuVersion: "1.14.0-gpu"

kfsOnnxImage: mcr.microsoft.com/onnxruntime/server
kfsOnnxImageVersion: "v1.0.0"

kfsSkLearnImage: kfserving/sklearnserver
kfsSkLearnImageVersion: "v0.6.1"

kfsSeldonioImage: docker.io/seldonio/mlserver
kfsSeldonioImageVersion: "0.2.1"

kfsXgbserverImage: kfserving/xgbserver
kfsXgbserverImageVersion: "v0.6.1"

kfsPytorchImage: kfserving/pytorchserver
kfsPytorchImageVersion: "v0.6.1"
kfsPytorchImageGpuVersion: "v0.6.1-gpu"

kfsTorchServeImage: pytorch/torchserve-kfs
kfsTorchServeImageVersion: "0.4.0"
kfsTorchServeImageGpuVersion: "0.4.0-gpu"

kfsTritonImage: nvcr.io/nvidia/tritonserver
kfsTritonImageVersion: "20.08-py3"

kfsPmmlserverImage: kfserving/pmmlserver
kfsPmmlserverImageVersion: "v0.6.1"

kfsLgbserverImage: kfserving/lgbserver
kfsLgbserverImageVersion: "v0.6.1"

kfsPaddleserverImage: kfserving/paddleserver
kfsPaddleserverImageVersion: "v0.6.1"

kfsStorageInitializerImage: kfserving/storage-initializer

kfsModelsWebAppImage: kfserving/models-web-app
kfsControllerImage: kfserving/kfserving-controller
kfsKubeRbacProxyImage: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.0


# ----------------------------------------------------
# knative
# ----------------------------------------------------
knativeVersion: "v0.22.1"

# NOTE: kubeflow's knative installation uses digest to pull these images.
# @sha256:0b8e031170354950f3395876961452af1c62f7ab5161c9e71867392c11881962
knativeServingQueueImage: gcr.io/knative-releases/knative.dev/serving/cmd/queue
# @sha256:fed92af8b9779c97482906db8857f27b5d4826708b75d0298aa30fad8900671f
knativeServingActivatorImage: gcr.io/knative-releases/knative.dev/serving/cmd/activator
# @sha256:bc5ae3090ab0322ed0e4f9efddb60fa85f6ff3a29156411d24d0e4764b18eba7
knativeServingAutoscalerImage: gcr.io/knative-releases/knative.dev/serving/cmd/autoscaler
# @sha256:bd7c6350e5d5c4edaa197a86fb96cff78bdd3e61f33fcb77aa60930de0ec0827
knativeServingControllerImage: gcr.io/knative-releases/knative.dev/serving/cmd/controller
# @sha256:1e371db6b1a9f9265fc7a55d15d98c935c0c28925ffde351fb3b93f331c5a08e
knativeNetWebhookImage: gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook
# @sha256:ff8680da52ef47b8573ebc3393cbfa2f0f14b05c1e02232807f22699adbef57a
knativeNetControllerImage: gcr.io/knative-releases/knative.dev/net-istio/cmd/controller
# @sha256:6f41d379f1aacdfbb8f6d4f539e1769040e4f01bff3ad9c249b427e54dc56ea8
knativeServingWebhookImage: gcr.io/knative-releases/knative.dev/serving/cmd/webhook

# Used by templates/cluster-local-gateway.yaml for knative istio confs.
knativeProxyvImage: docker.io/istio/proxyv2:1.9.6
# Istio 使用的主要的 configmap，为创建 kfserving cluster-local-gateway 使用。
# 可以使用命令 kubectl -n istio-system get configmap 确认。
knativeIstioConfigmap: istio
# kfserving cluster-local-gateway 使用的 istio 配置项 ISTIO_META_CLUSTER_ID。
# 默认为: Kubernetes
istioMetaClusterID: Kubernetes

# ----------------------------------------------------
# training operators
# ----------------------------------------------------
trainingOperatorImage: public.ecr.aws/j1r0q0g6/training/training-operator:760ac1171dd30039a7363ffa03c77454bd714da5
mpiOperatorImage: mpioperator/mpi-operator:0.3.0
mpiOperatorKubectlDeliveryImage: mpioperator/kubectl-delivery:latest

# ----------------------------------------------------
# Tensorboard
# ----------------------------------------------------
tensorboardControllerImage: public.ecr.aws/j1r0q0g6/notebooks/tensorboard-controller:v1.4
tensorboardWebAppImage: public.ecr.aws/j1r0q0g6/notebooks/tensorboards-web-app:v1.4
